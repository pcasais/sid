package com.damosais.sid.webapp.windows;

import java.util.Arrays;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.damosais.sid.database.beans.Vulnerability;
import com.damosais.sid.database.beans.VulnerabilityType;
import com.damosais.sid.database.services.CVEDefinitionService;
import com.damosais.sid.database.services.VulnerabilityService;
import com.damosais.sid.webapp.GraphicResources;
import com.damosais.sid.webapp.VulnerabilitiesView;
import com.vaadin.data.fieldgroup.BeanFieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

/**
 * This class handles the window where the Vulnerabilities are created or edited
 *
 * @author Pablo Casais Solano
 * @version 1.0
 * @since 1.0
 */
@Component
public class VulnerabilityWindow extends Window {
    private static final Logger LOGGER = Logger.getLogger(VulnerabilityWindow.class);
    private static final long serialVersionUID = 6904515264886742940L;
    
    private final VerticalLayout content;

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Autowired
    private CVEDefinitionService cveDefinitionService;

    /**
     * Creates a new window to add or edit CVE definitions
     */
    public VulnerabilityWindow() {
        setModal(true);
        setSizeUndefined();
        content = new VerticalLayout();
        content.setSizeUndefined();
        content.setSpacing(true);
        content.setMargin(true);
        setContent(content);
    }

    /**
     * Creates the form for the CVE definition
     *
     * @param vulnerability
     *            The vulnerability to add or edit
     * @param vulnerabilitiesView
     *            The view that make the call
     */
    private void createDefinitionForm(Vulnerability vulnerability, VulnerabilitiesView vulnerabilitiesView) {
        // 1st) We create the form and assign the binder
        final FormLayout form = new FormLayout();
        final BeanFieldGroup<Vulnerability> binder = new BeanFieldGroup<>(Vulnerability.class);
        binder.setItemDataSource(vulnerability);
        binder.setBuffered(true);
        
        // 2nd) We add the selector for the type
        final ComboBox vulnerabilityTypeField = new ComboBox("Type", Arrays.asList(VulnerabilityType.values()));
        vulnerabilityTypeField.setWidth(100, Unit.PERCENTAGE);
        binder.bind(vulnerabilityTypeField, "type");
        form.addComponent(vulnerabilityTypeField);
        
        // 3rd) We add now the selector for the CVE definitions
        final ComboBox cveDefinitionField = new ComboBox("CVE definition", cveDefinitionService.list());
        cveDefinitionField.setWidth(100, Unit.PERCENTAGE);
        binder.bind(cveDefinitionField, "definition");
        form.addComponent(cveDefinitionField);

        // 4th) We add now the text are for the notes
        final TextArea notesField = new TextArea("Notes");
        notesField.setNullRepresentation("");
        notesField.setWidth(100, Unit.PERCENTAGE);
        binder.bind(notesField, "notes");
        form.addComponent(notesField);

        // 9th) We create the save button
        final Button saveButton = new Button("Save", event -> {
            try {
                binder.commit();
                final Vulnerability vulnerabilityCommited = binder.getItemDataSource().getBean();
                if (vulnerabilityCommited.getDefinition() != null) {
                    vulnerabilityCommited.getDefinition().getVulnerabilities().add(vulnerabilityCommited);
                }
                vulnerabilityService.save(vulnerabilityCommited);
                vulnerabilitiesView.refreshCVEsTableContent();
                new Notification("Success", "Vulnerability saved in the database", Notification.Type.TRAY_NOTIFICATION).show(getUI().getPage());
                getUI().removeWindow(this);
            } catch (final CommitException e) {
                LOGGER.error("Problem saving vulnerability in database", e);
                new Notification("Failure", "Error saving vulnerability: " + e.getLocalizedMessage(), Notification.Type.ERROR_MESSAGE);
            }
        });
        saveButton.setStyleName("link");
        saveButton.setIcon(GraphicResources.SAVE_ICON);
        
        // 7th) We now clear the window and add the components
        content.removeAllComponents();
        content.addComponent(form);
        content.addComponent(saveButton);
        content.setComponentAlignment(saveButton, Alignment.BOTTOM_CENTER);
    }

    /**
     * Prepares the window to add a new vulnerability
     *
     * @param vulnerabilitiesView
     *            The view that called
     */
    public void setAddMode(VulnerabilitiesView vulnerabilitiesView) {
        setCaption("Adding new Vulnerability");
        createDefinitionForm(new Vulnerability(), vulnerabilitiesView);
    }
    
    /**
     * Prepares the window to edit an existing vulnerability
     *
     * @param vulnerabilityToAlter
     *            vulnerability to be edited
     * @param vulnerabilitiesView
     *            the view that called
     */
    public void setEditMode(Vulnerability vulnerabilityToAlter, VulnerabilitiesView vulnerabilitiesView) {
        setCaption("Editing Vulnerability");
        createDefinitionForm(vulnerabilityToAlter, vulnerabilitiesView);
    }
}